/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// Spanish layout

#include "keys_es.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    // Combo keys are a way to combine multiple keypresses to output a different key.

    combos {
        compatible = "zmk,combos";

        combo_clear_bluetooth {
            timeout-ms = <50>; // Press all the below keys within 50ms to activate mapping
            key-positions = <52 42 0>; // Press 52=LOWER, 42=[, 0=tilde
            bindings = <&bt BT_CLR>; // activate clear bluetooth bindings for current channel
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |   `      |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   -   |
            // |  TAB     |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   =   |
            // |hCTRL tESC|  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT    |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                        | ALT  | GUI  | LOWER|  SPACE |  | BSPC  | ENTER| RAISE | CTRL  |

            bindings = <
&mt LEFT_CONTROL CAPSLOCK  &kp N1  &kp N2  &kp N3    &kp N4     &kp N5                                 &kp N6       &kp N7               &kp N8     &kp N9   &kp N0    &kp ES_SQT
&kp TAB                    &kp Q   &kp W   &kp E     &kp R      &kp T                                  &kp Y        &kp U                &kp I      &kp O    &kp P     &kp ENTER
&lt 2 ESC                  &kp A   &kp S   &kp D     &kp F      &kp G                                  &kp H        &kp J                &kp K      &kp L    &kp SEMI  &lt 1 APOS
&kp LSHFT                  &kp Z   &kp X   &kp C     &kp V      &kp B   &out OUT_TOG    &tog 2         &kp N        &kp M                &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                           &kp LALT  &kp LMETA  &mo 2   &kp SPACE       &kp BACKSPACE  &lt 1 SPACE  &mt RIGHT_ALT ENTER  &kp RCTRL
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  F12    |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |   F7  |   F8  |  F9  |  F10  |  F11  |
            // |   `     |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |   -   |
            // |CTRL/ESC |     |     |      |      |      |                   |  <-  |   ^   |   v   |  ->  |       |       |
            // | SHIFT   |     |     |      |      |      |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F12        &kp F1              &kp F2             &kp F3                &kp F4         &kp F5                                          &kp F6        &kp F7     &kp F8  &kp F9     &kp F10              &kp F11
&kp ES_ORDM    &kp ES_EXCLAMATION  &kp ES_AT_SIGN     &kp ES_HASH           &kp ES_DOLLAR  &kp ES_PERCENT                                  &kp LC(ES_C)  &kp N7     &kp N8  &kp N9     &kp LC(ES_V)         &kp ES_QMARK
&mt LCTRL ESC  &kp ES_BACKSLASH    &kp ES_LEFT_BRACE  &kp ES_LEFT_BRACKET   &kp ES_LPAR    &kp ES_SQT                                      &kp LEFT      &kp DOWN   &kp UP  &kp RIGHT  &kp RIGHT_SHIFT      &trans
&kp LSHIFT     &kp ES_LESS_THAN    &kp ES_RBRC        &kp ES_RIGHT_BRACKET  &kp ES_RPAR    &kp ES_DOUBLE_QUOTES  &bt BT_NXT    &bt BT_PRV  &kp ES_AMPS   &kp MINUS  &trans  &trans     &kp ES_GREATER_THAN  &kp RIGHT_SHIFT
                                                      &trans                &trans         &trans                &trans        &trans      &trans        &trans     &trans
            >;
        };

        cl_Layer {
            bindings = <
&trans  &trans            &trans               &trans        &trans            &trans                             &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans            &kp UP_ARROW         &kp DOLLAR    &trans            &kp LC(ES_T)                       &kp ES_EQUAL  &kp N7        &kp N8        &kp N9        &kp ES_PLUS   &kp ES_QUESTION
&trans  &kp LEFT          &kp DOWN_ARROW       &kp RIGHT     &kp LC(ES_F)      &trans                             &kp ES_ASTRK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ES_MINUS  &kp ES_DOT
&trans  &kp ES_LESS_THAN  &kp ES_GREATER_THAN  &kp LC(ES_C)  &kp RS(LC(ES_V))  &trans        &trans    &kp ENTER  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ES_SLASH  &kp ES_GRAVE
                                               &trans        &trans            &trans        &trans    &trans     &trans        &to 2         &trans
            >;
        };

        Conf-layer {
            bindings = <
&ext_power EP_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &trans  &trans            &trans  &trans  &trans  &trans
&trans             &trans        &trans        &trans        &trans        &trans                                  &trans  &trans            &trans  &trans  &trans  &trans
&trans             &trans        &trans        &trans        &trans        &trans                                  &trans  &ext_power EP_ON  &trans  &trans  &trans  &trans
&trans             &trans        &trans        &bt BT_CLR    &out OUT_TOG  &out OUT_BLE  &bt BT_NXT    &bt BT_PRV  &trans  &trans            &trans  &trans  &trans  &trans
                                               &trans        &trans        &trans        &trans        &trans      &trans  &trans            &trans
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | EXT PWR TOGGLE | BT1     | BT2    |  BT3 |  BT4  |  BT5 |                    |      |       |       |      |       |       |
            // |                |         |        |      |       |      |                    |      |       |       |      |       |   \   |
            // |   ~            |  !      |  @     |  #   |  $    |  %   |                    |  ^   |  &    |  *    |  (   |   )   |   _   |
            // | SHIFT          |  EP_ON  | EP_OFF |      |  (    |  {   |       |  |   DEL   |  }   |  )    |  +    |  {   |   }   | SHIFT |
            //                                     |      |       |      |       |  |         |      |       |       |

            bindings = <
&ext_power EP_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                     &trans     &trans    &trans           &trans            &trans             &trans
&trans             &kp ES_N1     &kp ES_N2     &kp ES_N3     &kp ES_N4     &kp ES_N5                        &trans     &trans    &trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp ES_QUESTION
&kp TILDE          &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                        &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR          &kp RPAR           &kp UNDER
&kp LSHIFT         &trans        &trans        &kp LPAR      &kp LBRC      &trans        &trans    &kp DEL  &kp RBRC   &kp RPAR  &kp KP_PLUS      &kp LBRC          &kp RBRC           &kp RSHFT
                                               &trans        &trans        &trans        &trans    &trans   &trans     &trans    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        conf {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
