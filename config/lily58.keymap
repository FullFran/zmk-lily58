/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// Spanish layout

#include "keys_es.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    // Combo keys are a way to combine multiple keypresses to output a different key.

    combos {
        compatible = "zmk,combos";

        combo_clear_bluetooth {
            timeout-ms = <50>; // Press all the below keys within 50ms to activate mapping
            key-positions = <52 42 0>; // Press 52=LOWER, 42=[, 0=tilde
            bindings = <&bt BT_CLR>; // activate clear bluetooth bindings for current channel
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <37 38>;
        };

        redo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <38 37 36>;
        };

        copy {
            bindings = <&kp LC(ES_C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LC(ES_V)>;
            key-positions = <39 40>;
        };

        cut {
            bindings = <&kp LC(ES_X)>;
            key-positions = <38 40>;
        };

        save {
            bindings = <&kp LC(ES_S)>;
            key-positions = <26 28>;
        };

        Caps-lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <36 49>;
        };

        conf-layer {
            bindings = <&mo 4>;
            key-positions = <52 55>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <28 31>;
        };
    };

    behaviors {
        ht_modL: ht_modL {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MODL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        ht_hrR: ht_hrR {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HRR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |   `      |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   -   |
            // |  TAB     |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   =   |
            // |hCTRL tESC|  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT    |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                        | ALT  | GUI  | LOWER|  SPACE |  | BSPC  | ENTER| RAISE | CTRL  |

            bindings = <
&mt LEFT_CONTROL CAPSLOCK  &kp N1            &kp N2           &kp N3            &kp N4             &kp N5                                    &kp N6       &kp N7               &kp N8              &kp N9          &kp N0                    &kp BACKSPACE
&kp TAB                    &kp Q             &kp W            &kp E             &kp R              &kp T                                     &kp Y        &kp U                &kp I               &kp O           &kp P                     &kp ENTER
&lt 2 ESC                  &ht_modL LMETA A  &ht_modL LALT S  &ht_modL LCTRL D  &ht_modL LSHIFT F  &kp G                                     &kp H        &ht_hrR RSHFT J      &ht_hrR RCTRL ES_K  &ht_hrR RALT L  &ht_hrR RMETA ES_N_TILDE  &lt 1 APOS
&kp LSHFT                  &kp Z             &kp X            &kp C             &kp V              &kp B         &to 3        &tog 2         &kp N        &kp M                &kp COMMA           &kp DOT         &kp MINUS                 &kp RSHFT
                                                              &kp LALT          &kp LMETA          &lt 2 DELETE  &kp SPACE    &kp BACKSPACE  &lt 1 ENTER  &mt RIGHT_ALT SPACE  &kp RCTRL
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  F12    |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |   F7  |   F8  |  F9  |  F10  |  F11  |
            // |   `     |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |   -   |
            // |CTRL/ESC |     |     |      |      |      |                   |  <-  |   ^   |   v   |  ->  |       |       |
            // | SHIFT   |     |     |      |      |      |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F12        &kp F1                       &kp F2              &kp F3                 &kp F4                  &kp F5                                                             &kp F6        &kp F7     &kp F8  &kp F9     &kp F10              &kp F11
&kp ES_ORDM    &kp ES_EXCLAMATION           &kp ES_AT_SIGN      &kp ES_HASH            &kp ES_DOLLAR           &kp ES_PERCENT                                                     &kp LC(ES_C)  &kp N7     &kp N8  &kp N9     &kp LC(ES_V)         &kp ES_QMARK
&mt LCTRL ESC  &ht_modL LMETA ES_BACKSLASH  &ht_modL LALT LBRC  &ht_hrR LCTRL ES_LBKT  &ht_modL LSHFT ES_LPAR  &kp ES_SQT                                                         &kp LEFT      &kp DOWN   &kp UP  &kp RIGHT  &kp RIGHT_SHIFT      &trans
&kp LSHIFT     &kp ES_LESS_THAN             &kp ES_RBRC         &kp ES_RIGHT_BRACKET   &kp ES_RPAR             &kp ES_DOUBLE_QUOTES  &kp LS(LG(LEFT))    &kp LG(RS(RIGHT_ARROW))  &kp ES_AMPS   &kp MINUS  &trans  &trans     &kp ES_GREATER_THAN  &kp RIGHT_SHIFT
                                                                &trans                 &trans                  &trans                &trans              &trans                   &trans        &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&trans  &trans            &trans               &trans        &trans            &trans                             &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans            &kp UP_ARROW         &kp DOLLAR    &trans            &kp LC(ES_T)                       &kp ES_EQUAL  &kp N7        &kp N8        &kp N9        &kp ES_PLUS   &kp ES_QUESTION
&trans  &kp LEFT          &kp DOWN_ARROW       &kp RIGHT     &kp LC(ES_F)      &trans                             &kp ES_ASTRK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ES_MINUS  &kp ES_DOT
&trans  &kp ES_LESS_THAN  &kp ES_GREATER_THAN  &kp LC(ES_C)  &kp RS(LC(ES_V))  &trans        &kp F4    &kp ENTER  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ES_SLASH  &kp ES_GRAVE
                                               &trans        &trans            &trans        &trans    &trans     &trans        &mo 2         &trans
            >;
        };

        GAMING_layer {
            bindings = <
&mt LEFT_CONTROL CAPSLOCK  &kp N1        &kp N2  &kp N3    &kp N4     &kp N5                                    &kp N6       &kp N7               &kp N8     &kp N9   &kp N0              &kp BACKSPACE
&kp TAB                    &kp Q         &kp W   &kp E     &kp R      &kp T                                     &kp Y        &kp U                &kp I      &kp O    &kp P               &kp ENTER
&lt 2 ESC                  &kp A         &kp S   &kp D     &kp F      &kp G                                     &kp H        &kp J                &kp K      &kp L    &kp ES_N_TILDE      &lt 1 APOS
&kp LSHFT                  &mt LSHIFT Z  &kp X   &kp C     &kp V      &kp B         &to 0        &tog 2         &kp N        &kp M                &kp COMMA  &kp DOT  &mt RSHFT ES_MINUS  &kp RSHFT
                                                 &kp LALT  &kp LMETA  &lt 2 DELETE  &kp SPACE    &kp BACKSPACE  &lt 1 SPACE  &mt RIGHT_ALT ENTER  &kp RCTRL
            >;
        };

        Conf-layer {
            bindings = <
&ext_power EP_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4                            &trans     &trans            &trans  &trans  &trans  &trans
&trans             &to 2         &trans        &trans             &to 0            &trans                                  &trans     &soft_off         &trans  &trans  &trans  &trans
&trans             &trans        &kp C_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &to 3                                   &soft_off  &ext_power EP_ON  &trans  &trans  &trans  &trans
&trans             &trans        &trans        &bt BT_CLR         &out OUT_TOG     &out OUT_BLE  &bt BT_NXT    &bt BT_PRV  &trans     &trans            &trans  &trans  &trans  &trans
                                               &trans             &trans           &trans        &trans        &trans      &trans     &trans            &trans
            >;
        };

        nav_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | EXT PWR TOGGLE | BT1     | BT2    |  BT3 |  BT4  |  BT5 |                    |      |       |       |      |       |       |
            // |                |         |        |      |       |      |                    |      |       |       |      |       |   \   |
            // |   ~            |  !      |  @     |  #   |  $    |  %   |                    |  ^   |  &    |  *    |  (   |   )   |   _   |
            // | SHIFT          |  EP_ON  | EP_OFF |      |  (    |  {   |       |  |   DEL   |  }   |  )    |  +    |  {   |   }   | SHIFT |
            //                                     |      |       |      |       |  |         |      |       |       |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp J   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &mo 0   &trans    &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
